JavaScript-тренди, на які варто звернути увагу в 2017-му

Я вирішив написати цей матеріал після того, як побачив твіт Дена Абрамова, за який хочу сказати йому величезне спасибі.
Ден поставив своїм підписникам питання про найцікавіші події у світі JavaScript, які варті уваги широкої громадськості.

What is the most interesting thing happening in the JavaScript world that deserves more exposure?  Dan Abramov (@dan_abramov) December 29, 2016

Любителі JS на питання відгукнулися, під твітом зібралася ціла гора відповідей. Кожен говорив про те, що, на його думку,
варто звернути увагу в 2017-му році. В результаті вийшла вельми цікава підбірка, з якої я вибрав все краще і додав пояснення.

Відразу хотілося б сказати ось що. Судячи з того, що засоби функціонального програмування видно в моєму матеріалі, що називається,
неозброєним оком, час, коли ФП було долею небагатьох, що бігають за мінливою модою, минув. Тепер це виглядає цілком собі серйозним трендом.

Ось технології, зазначені JavaScript-спільнотою як найбільш перспективні. Я розташував їх у порядку спадання популярності.

WebAssembly
Ех, з чого б почати пояснювати особливості технології WebAssembly? Її скорочена назва, «wasm», виглядає майже як «asm», а це – натяк на те,
що перед нами – щось низькорівневе. Насправді так воно і є. Ця технологія спрямована на спрощення розробки на будь-якій мові (радійте,
любителі функціонального і реактивного програмування!) і компіляцію коду для вебу.

Технологія WebAssembly припала до душі багатьом. Справа в тому, що багато розробників все ще знаходиться у досить неоднозначних взаєминах з JS,
віддаючи безумовну перевагу іншим мовам, код, написаний на яких можна перетворити в JavaScript.

У будь-якому випадку, JS рухається вперед семимильними кроками, і ніхто не чекає, що це скоро припиниться.

WebAssembly – розробка порівняно молода. Зараз вона знаходиться у фазі ознайомлювальної версії, до релізу ще далеко. Таким чином, упевнений,
що за її розвитком варто поспостерігати, так як вона здатна дуже серйозно вплинути на майбутнє JS.

Elm
Безліч розробників буквально закохалися в Elm в 2016-му. Це – доступна всім бажаючим мова функціонального програмування.

Ось цитати з «Введення в Elm», що розкривають основні особливості мови:

Немає помилок часу виконання, null, повідомлень в дусі «undefined is not a function».
Зручні повідомлення про помилки, які допомагають швидше розширювати програми.
Добре спроектований код, який залишається таким по мірі розростання додатку.
Автоматичний семантичний контроль версій для всіх пакетів Elm.

Elm – це чудові інструменти, скомбіновані з чистим, простим і компактним кодом.
Звичайно, Elm компілюється в JS, що і привернуло до нього увагу JavaScript-розробників.

Vue.js
В минулому році було дуже цікаво спостерігати за тим, як росла популярність Vue.js. Ця бібліотека, безсумнівно, буде помітним гравцем і в 2017-му.

Я, до речі, завдяки Евану Ю, безстрашному творцеві Vue.js і лідеру спільноти, надихнувся в минулому році ідеями Open Source.

Vue – це конкурент React, тому цілком природно те, що в 2017-му нас чекають нескінченні суперечки про те, що краще: React, Vue, або Elm.
У підсумку все вирішить те, яке співтовариство запропонує кращу підтримку великих проектів. Вважаю, Еван Ю знає, що треба робити.

Недавно вийшла версія Vue 2.0, вона стала швидшою і меншою, що робить цю бібліотеку ще привабливішою.

Babili (babel-minify)
Babili вийшов в серпні 2016. Це – мініфікатор, вміє працювати з ES6+, заснований на інфраструктурі Babel.

Навіщо ще один мініфікатор?

Babili може приймати на вхід конструкції ES2015+, в той час, як існуючі мініфікатори зазвичай обмежені ES5. Вони вимагають, щоб код був
транскомпільований в підтримуваний ними варіант мови перед мініфікацією. Це стає непотрібним, якщо врахувати, що програмісти вже створюють
робочі проекти на ES2015. Babili, крім того, гнучкий, і має модульну структуру (фактично, це набір налаштувань Babel, що означає підтримку плагінів),
його можна використовувати як пресет або як інструмент командного рядка. Крім того, Babili зможе виконувати оптимізації коду, специфічні для ES2015+».

OCaml
Сам по собі OCaml не особливо пов'язаний з JS, але для того, щоб усвідомити важливість двох наступних трендів в нашому списку, вам потрібно буде
знати про те, що таке OCaml.

Якщо ви спостерігаєте за відродженням функціонального програмування, що відбувається останні кілька років, ви могли чути про Haskell. OCaml швидко стає
популярнішим, ніж Haskell, переважно через те, що існує кілька відмінних компіляторів з OCaml в JS.
Розробники Facebook, наприклад, є великими фанатами OCaml, так як він допоміг їм створити Hack, Flow і Infer.

BuckleScript
BuckleScript – це компілятор для OCaml, створений командою розробників Bloomberg (так, це той самий Bloomberg). Ось що про це розповідає Дуейн Джонсон:
«BuckleScript, або, для стислості, bsc, це порівняно новий JavaScript-компілятор для OCaml. Іншими словами, ви можете використовувати функціональну,
типізовану мову OCaml для компіляції коду на ньому в JavaScript. Чудово тут те, що код, вироблений BuckleScript, цілком читабельний (тобто, якщо ви знайомі з JS,
цей код можна зрозуміти, його легше буде відлагоджувати), а також – те, що BuckleScript пов'язаний з екосистемою npm. У підсумку ви отримуєте найкраще
з двох світів: потужну, функціональну, типізовану мову, ув'язаний з чудовими сучасними бібліотеками для веб-розробки».

ReasonML
Reason – це мова, побудована на базі OCaml, що володіє неймовірно доброзичливим синтаксисом, глибокою інтеграцією редактора і чудовими засобами складання.
Його створила та ж команда з Facebook, яка приклала руку до React.

PureScript
Очевидно, ви вже здогадалися, що PureScript – це ще одна суворо типізована ефективна мова програмування, яка компілюється в JavaScript.

Він особливо популярний серед любителів Haskell. Можете вважати його конкурентом Elm. Ось, що пропонує нам PureScript:

Відсутність важкого середовища виконання коду.
Застосування стратегії строгих (а не лінивих) обчислень, схожою на ту, що застосовується в JavaScript.
Підтримка літерального способу опису об'єктів JavaScript
Система типів, яка, мабуть, потужніший і зручніше, ніж в Haskell.
Гранично простий інтерфейс зовнішніх функцій, який полегшує взаємодію з JS-бібліотеками.

TypeScript
TypeScript – це надбудова над JavaScript, яка покликана поліпшити якість і зрозумілість коду. Крім того, TypeScript полегшує процес розробки,
вказуючи на помилки прямо в процесі введення тексту програми. І, до речі, редактор Atom підтримує TypeScript.

Webpack-blocks
Це – хороший спосіб конфігурування Webpack. Мабуть, головний аргумент на його користь висловив Ден Абрамов: «Очевидно,
Webpack не збирається ставати високорівневим інструментом. Тому його конфігурування має сенс передати зовнішнім засобам.
Установки повинні бути представлені у вигляді добре спроектованих блоків, а не у формі копіювання і вставлення фрагментів текстів з параметрами».

Якщо ви користуєтеся Webpack, у вас є хороші шанси знайти корисне застосування webpack-blocks.

GraphQL
Таке відчуття, що GraphQL замінить REST, особливо в компаніях, яким доводиться обробляти величезні обсяги даних.

React Storybook
Це – середовище розробки інтерфейсів користувачів для React / React Native. З його допомогою можна візуалізувати різні стани компонентів інтерфейсу
і працювати над ними в інтерактивному режимі.

jQuery 3.0
Прадідусь jQuery все ще з нами! Команда розробників випустила більш компактну і швидку версію у червні 2016-го, але багато, захоплені чимось
на зразок освоєння React, імовірно, про нього і не чули.

Pixi.js
Якщо ви займаєтеся розробкою фантастично прекрасних 2D-інтерфейсів або ігор, що використовують WebGL, Pixi.js стане для вас справжньою знахідкою.

Preact
Preact.js — швидка альтернатива React розміром всього 3 Кб з тим же самим ES6 API.

Inferno
Inferno – альтернатива Preact. Це – швидка бібліотека, схожа на React, що займає всього 8 Кб, призначена для створення високопродуктивних
користувальницьких інтерфейсів як на стороні клієнта, так і на стороні сервера. Вона надає розробнику більше вбудованих додаткових можливостей, ніж Preact.

Rust
Rust – ще одна швидка мова, яка, з допомогою emscripten, компілюється в JavaScript. Мабуть, таке розмаїття мов цілком однозначно вказує на те,
як багато розробників більше не хочуть писати на JS.

Custom Elements v1
Технологія Custom Elements (разом з Shadow DOM) мала проблеми з адаптацією (переважно через складність сприйняття її концепцій),
але вона цілком може продовжити розвиток в 2017-му.

Основним напрямком вдосконалень буде підтримка браузерів, яка, вочевидь, зростає. Я думаю, що це відмінний спосіб дати більше можливостей
розробникам, водночас скорочуючи обсяг коду.

WebRTC
Складно повірити в те, що WebRTC вже п'ять років. Facebook, Slack, Snapchat і WhatsApp застосовують його в своїх системах.
Зростання популярності WebRTC неминуче, їм будуть користуватися все більше і більше компаній, які пропонують користувачам аудіо — та відеозв'язок.

Next.js
Next.js – це маленький фреймворк, побудований на основі React, Webpack і Babel. Він спрощує створення і розгортання React-додатків, збірка яких здійснюється на стороні сервера.

Висновки:
Як бачите, вже зараз підібрався значний список JS-проектів, за якими варто поспостерігати в 2017-му. Вважаю, що цей рік принесе нам і щось зовсім нове.
У будь-якому випадку, буде цікаво.

Після того, як цей матеріал побачив світ, читачі підказали кілька важливих технологій, які дозволили його розширити. Можливо, і ви щось підкажете?
Джерело: Хабрахабр
http://it-ua.info/news/2017/01/09/javascript-trendi-na-yak-varto-zvernuti-uvagu-v-2017-mu.html